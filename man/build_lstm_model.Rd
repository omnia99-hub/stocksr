% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_lstm.R
\name{build_lstm_model}
\alias{build_lstm_model}
\title{Build and Train an LSTM Model for Sector Data}
\usage{
build_lstm_model(sector_data, sector_name, time_steps = 10)
}
\arguments{
\item{sector_data}{A data frame with `Date` and `sector_index` columns.}

\item{sector_name}{(character) Name of the sector, used for plotting titles.}

\item{time_steps}{(int, default = 10) Number of time steps for each input
sequence.}
}
\value{
A list containing:
- `model`: Trained LSTM model (`nn_module`).
- `rmse`: Root Mean Squared Error on test set.
- `mae`: Mean Absolute Error on test set.
- `r2`: R-squared value on test set.
- `feature_names`: Names of input features used.
}
\description{
This function prepares sequential data using lagged features, scales the
features and target, trains an LSTM model, and evaluates its performance.
Metrics like RMSE, MAE, and RÂ² are reported, and a plot of actual vs.
predicted values is generated.
}
\details{
Builds, trains, and evaluates an LSTM model on a given sector's time series
data. Prepares input sequences, fits the model, applies early stopping, and
visualizes predictions against actual values.


- Prepares lagged feature sequences using `prepare_data_for_lstm`.
- Splits the data into 80% training and 20% testing sets.
- Trains an LSTM model using MSE loss and Adam optimizer.
- Applies early stopping with patience.
- Plots predicted vs. actual values over time.
}
\examples{
library(torch)
library(ggplot2)

# Example with synthetic data
df <- data.frame(
  Date = seq(as.Date("2020-01-01"), by = "day", length.out = 150),
  sector_index = cumsum(rnorm(150))
)

results <- build_lstm_model(df, sector_name = "Technology", time_steps = 10)

print(results$rmse)
print(results$r2)

}
