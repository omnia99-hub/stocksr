% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_rfr.R, R/rf_model.R
\name{build_random_forest_model}
\alias{build_random_forest_model}
\title{Build Random Forest Model for Sector Index}
\usage{
build_random_forest_model(sector_data, sector_name)

build_random_forest_model(sector_data, sector_name)
}
\arguments{
\item{sector_data}{A data frame with engineered features. Must include
'sector_index', 'Date', and optionally 'returns'.}

\item{sector_name}{A string giving the sector name for reporting.}
}
\value{
A named list containing:
\describe{
  \item{model}{The trained Random Forest model object.}
  \item{rmse}{Root Mean Squared Error on the test set.}
  \item{mae}{Mean Absolute Error on the test set.}
  \item{r2}{R-squared score on the test set.}
  \item{feature_importance}{A data frame showing feature importance ranked
  by IncNodePurity.}
}

A list with:
\describe{
  \item{model}{Trained random forest model.}
  \item{rmse}{Root mean squared error.}
  \item{mae}{Mean absolute error.}
  \item{r2}{R-squared performance.}
  \item{feature_importance}{Data frame of ranked feature importance.}
}
}
\description{
Trains and evaluates a Random Forest regression model to predict a sector's
index based on engineered features. The function performs an 80/20 time-based
split for training and testing, computes performance metrics (RMSE, MAE, R2),
and visualizes predicted vs actual values. It also returns the feature
importance rankings.

Trains and evaluates a random forest model to predict sector index values
based on engineered features. It performs an 80/20 time-based split,
computes RMSE, MAE, and RÂ², and returns feature importance.
}
\examples{
\dontrun{
  sectors <- load_and_preprocess_data(stocksr)
  df <- calculate_sector_index(sectors[["Technology"]])
  df_tech <- calculate_technical_indicators(df)
  result <- build_random_forest_model(df_tech, "Technology")
  result$rmse
  head(result$feature_importance)
}
}
